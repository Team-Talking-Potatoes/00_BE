plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.4'
}

group = 'Potatoes'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-crypto'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    
    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Database
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Google SMTP
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //Query Dsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    //Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
}

processResources.dependsOn('copySecret')
tasks.register('copySecret', Copy) {
    description = 'Copy submodules to project'
    from('00_BE_Secrets') {
        include('*.yml')
        include('*.sql')
    }
    into('src/main/resources')
}

project.ext {
    dockerUser = System.getenv('DOCKER_USERNAME')
    activeProfile = System.getenv('ACTIVE_PROFILE') ?: 'dev'
    containerPort = System.getenv('CONTAINER_PORT') ?: '8081'
}


def getDockerImage() {
    switch (activeProfile) {
        case 'dev':
            return System.getenv('DOCKER_DEV_REPO')
        case 'test':
            return System.getenv('DOCKER_TEST_REPO')
        default:
            return System.getenv('DOCKER_DEV_REPO')
    }
}

jib {
    from {
        image = 'eclipse-temurin:21-jre-alpine'
    }
    to {
        image = "${dockerUser}/${getDockerImage()}"
        tags = ["latest"]
    }
    container {
        jvmFlags = ["-Dspring.profiles.active=${activeProfile}", '-Dfile.encoding=UTF-8']
        ports = [containerPort]
    }
}
