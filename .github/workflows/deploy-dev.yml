name: Deploy Dev server

on:
  push:
    branches:
      - "develop"

permissions: write-all

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_DEV_REPO: ${{ secrets.DOCKER_DEV_REPO }}
      CONTAINER_PORT: ${{ secrets.CONTAINER_PORT_DEV }}
    steps:
      - name: 리포지토리를 가져옵니다
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.SUBMODULE_TOKEN }}

      - name: JDK 21을 설치합니다
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      - name: 도커 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: gradlew 파일에 실행 권한을 부여합니다
        run: chmod +x gradlew

      - name: Jib를 사용하여 도커 이미지 빌드 및 푸시
        run: |
          ./gradlew jib -Dspring.profiles.active=dev --no-daemon --console=plain

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_DEV_REPO: ${{ secrets.DOCKER_DEV_REPO }}
    steps:
      - name: AWS Credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: 개발 서버 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEV_AWS_EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.AWS_EC2_PEM_KEY }}
          script: |
            cd /home/ec2-user/potatoes/dev
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker stop develop-server
            docker rm develop-server
            docker rmi ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }}
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_DEV_REPO }}:latest
            docker-compose up -d
            docker image prune -f
